
the intro of computer programming
淺談電腦程式
2009-09-15 till 2009-09-20

*****

零、序
  0. 目的
  1. 讀者
  2.

壹、何謂程式
  0. 操作資料的方法
  1. 儲存資料的方法
  2. 輸入與輸出
  3. 沒有明確定義
  4. 命令式程式
  5. 函數式程式

貳、計算模型
  0. 何謂計算
  1. 圖靈機
  2. 停機問題
  3. λ演算
  4. 喬姆斯基譜系
  5. 程式語言

參、程式語言
  0. 型別系統
  1. 靜態分型與動態分型
  2. 視野
  3. 名稱連結
  4. 多形
  5. 物件導向

肆、

終、附錄
  0. 中英對照

*****

2009-09-15
零、序
0. 目的

呃，撰寫本文大致上有三個目的。一、雖然我並不是很明白「科學」的確切定義，
也不知道我所要說的東西談不談得上科學、工程、還是數學。但是或許很明白的是，
我們多多少少知道數學、物理，或是化學的基本概念，但相對而言，鮮少人對電腦程式
有相對應的瞭解。在書店裡面翻翻，大抵上可以找到各種科普的書，但很少主題是針對
電腦程式。談到所謂「電腦書」，大部份都是指工具書，這種隨著時間流逝，漸漸就會
失去其價值的書。在這個領域，不可否認很多東西都是飛快地在演進。但有些東西，
例如其背後的理論，雖然也是會改變，也會有是否主流的問題。可是他們的變動，
相對「電腦工具」而言，幾乎是不會改變的。理論也會被推翻，但這不是容易的事，
就算量子力學推翻了古典力學，古典力學仍然有其價值，也必然得學會他。那麼，
為什麼電腦科學沒有這些五花八門的科普讀物？

二、我很明白我並沒有能耐寫出什麼多有參考價值的文章，但如果沒有人去嘗試，
那麼也只是這樣而已。如果說一個經典底下，必然會有無數不怎麼有價值的東西，
如果說一個成功必然得是無數的失敗累積。那麼我倒是願意成為一個有用的失敗。
事實上，寫了一篇不怎麼樣的東西，除了浪費時間外，倒也沒多少談得上失敗的。
利用反覆思索文章的內容與編排方式，我也能夠減少自己做白日夢的時間。
再加上這確實也是磨練文筆與編排、表達、組織等等能力的好方法。同時，
所謂教學相長，還有描繪地圖以印證自己的理解前後連貫，有很多很好的理由。
雖然我不知道本文會描繪到哪些領域，不知道是否能有一個確切的定位，
但我想有些概念基本上是相似，甚至是相同的。每個人都可以任意用任何領域的
東西來驗證自己的理解與想法，或許是否有一個明確的「領域」倒不是那麼重要。
科學也好，工程也罷，數學也沒關係。本來就是森羅萬象，何須畫地自限？

三、等我想到了再告訴你。

1. 讀者

本文的目標族群大概也有以下三種。一、對電腦程式沒有概念，希望能稍微瞭解
電腦科學與程式設計在做什麼事，但又不想下海寫程式的人。本文不會說明怎麼
寫程式，也不會解釋每一個細節。我希望呈現的是想法，一種用程式的角度去看
世界的方法。迷失在繁複的細節裡，見樹不見林，是阻礙前進的巨大障礙之一。
目標族群也因此有了二、會寫程式，但總有種說不出所以然來的人。本文不談
硬體架構，就某方面而言，這同樣是一種實作細節。而事實上則是我根本就不懂
硬體，對於硬體完全沒有接觸，所以就算想談也無從談起。總之呢，如果覺得
有點茫然，或是覺得寫程式不過爾爾者，希望可以參考本文看看，看是否能夠
激起一些想法，理解一些電腦科學的理論，而不是認為寫程式這行只不過是勞力
密集的挖礦業罷了。三、等我想到了再告訴你。

*****

2009-09-20
壹、何謂程式
0. 操作資料的方法

廣義而言，程式就是可以被執行，一連串操作資料的方法。假設現在有一個圖書館，
裡面有許多的書，每本書上都有編號，表示這本書需要被放在哪個位置上。現在派
一個人，把圖書館裡放錯位置的書，放回原本的位置上。最後我們可以得到一個所有
書都在正確位置上的圖書館。這樣的排序動作，就可以視為一種程式，只是這個程式
不是被電腦執行，而是被真正的人類執行。而程式當然不會只具備這種特質，除此
之外還有許多概念是伴隨著操作資料的方式而誕生。並不是說這邊漏掉什麼沒講，
而是同一個東西我們能夠用不同的角度去觀察，可以得到不同的結論與概念。這些
東西並沒有非常明確的定義，只要能夠解釋就可以視為一種正確的概念。

1. 儲存資料的方法

有一種說法是程式就是演算法加資料結構。這裡的演算法，可以看成操作資料的方法。
對照上面提到的圖書館，就是如何調整書的位置，如何調整與書與書之間的順序。
而這裡的資料結構，則是一種表達資料的方式。比方說如果我們把書放在書架上，
這樣就是一種資料結構。如果我們把書單純從地上疊起來，橫著疊或是立著疊，
這些都是不同的資料結構。書本本身是資料，而如何擺放這些書本，則是資料結構
在處理的事情。因此從一開始的圖書館，經過排序之後變成書本順序正確的圖書館，
這一個動作就可以看成是在執行一個程式。而排序的方法，和書本擺放的方式，
加起來就等於是一個排序的程式。到這裡，我們看到了除了操作資料的方法外，
還有儲存資料的方法。

2. 輸入與輸出

也就是說，程式並不是一個具體的東西，他可以看成是一種執行方法的抽象概念。
圖書館本身並不是程式，但是排序圖書館這件事則是一個程式。執行前的狀態則
可以視為一種輸入，而執行後的狀態則可以視為一種輸出。因此，我們能夠把程式
包裝成一個黑盒子。我們看不到這個黑盒子的內部，但是我們能把東西丟到黑盒子
裡面，接著黑盒子會吐出某樣東西。原本圖書館的狀態，就是輸入給排序程式的輸入，
而排序好的圖書館，則是這個排序程式的輸出結果。這裡我們看到除了操作方法與
儲存方法外，還有輸入與輸出。而在圖書館的例子裡，排序過後我們把原始的輸入
捨棄掉了。也就是說，原本書本排序不正確的圖書館，被捨棄掉了，由輸出結果，
也就是書本排序好的圖書館取而代之。

3. 沒有明確定義

記得數學上的函數？我們也可以說這個程式其實是一種函數，給定一組輸入，
函數會給定另一組輸出。程式與函數之間有很大的關係，但不是完全一對一對應。
因此有些地方會把這個函數翻譯成函式，以之區分他與數學函數之間的關係。
但仍然有一種程式上的函數，跟數學上的函數極為接近。在這裡先不討論細節，
只是想說明同一種名詞，在不同領域裡很可能是有相似的概念，但不盡然相同。
有時候透過一種轉換方式，我們可以讓不同領域裡的概念互相轉換，使得原本
不同但相似的概念，可以變得完全相同。這個好處是，原本程式裡難以解決的
問題，很可能可以透過某種方式轉為數學問題，而數學裡或許早已有這個問題的
解答。不需要執著於名詞的定義，畢竟名詞只是用來幫助理解抽象概念的一種方法。
但這也不是在說我們不需要對名詞下定義，畢竟如果兩人用不同的名詞定義來討論，
是會導致雞同鴨講。應該是說，在不同的情境下，我們應該適當地調整名詞定義，
讓討論者之間的名詞定義是相同的，而不是堅持某個名詞一定具有某種定義。

也就是說，何謂程式，明確定義其實並不是很重要。只要大概知道其概念即可。
只要具備某種資料操作方式、資料儲存方式、資料輸出，與資料輸入等性質，
即可視為某種程度上的程式。不一定需要全部具備，但通常都會有這些性質。

<a href="http://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs">Algorithms + Data Structures = Programs</a>

*****

貳、計算模型

*****

終、附錄
0. 中英對照

algorithm: <a href="http://en.wikipedia.org/wiki/Algorithm">演算法</a>
computation: <a href="http://en.wikipedia.org/wiki/Computation">計算</a>
computer program: <a href="http://en.wikipedia.org/wiki/Computer_program">電腦程式</a>
computer programming: <a href="http://en.wikipedia.org/wiki/Computer_programming">電腦程式設計</a>
computer science: <a href="http://en.wikipedia.org/wiki/Computer_science">電腦科學</a>
data: <a href="http://en.wikipedia.org/wiki/Data_(computing)">資料</a>
data structure: <a href="http://en.wikipedia.org/wiki/Data_structure">資料結構</a>
function: <a href="http://en.wikipedia.org/wiki/Function_(mathematics)">函數</a>
model of computation: <a href="http://en.wikipedia.org/wiki/Model_of_computation">計算模型</a>
scientific modelling: <a href="http://en.wikipedia.org/wiki/Scientific_modelling">科學建模</a>
sorting: <a href="http://en.wikipedia.org/wiki/Sorting">排序</a>
subroutine: <a href="http://en.wikipedia.org/wiki/Subroutine">副程序</a>
program: 同 computer program
programming: 同 computer programming
